// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 0db2cec6a51bfbc8 "AM portfolio", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
}} Props

 */
import { routes } from "./chunks/chunk-23HYNGZD.js";

// virtual:shimmer
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/rtQOyoVani1apkkK1wG4/d9ozItVQcHT5nJznbF3p/zGd0Rd3IQ.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addFonts,
	cx,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
var serializationHash = "framer-QVjJF";
var variantClassNames = {
	z5IUohipo: "framer-v-1ansaoc",
};
var transition1 = {
	damping: 60,
	delay: 0,
	mass: 1,
	stiffness: 500,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var getProps = ({ height, id, width, ...props }) => {
	return {
		...props,
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const { activeLocale, setLocale } = useLocaleInfo();
	const { style, className, layoutId, variant, ...restProps } = getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		defaultVariant: "z5IUohipo",
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	const ref1 = React.useRef(null);
	const defaultLayoutId = React.useId();
	const componentViewport = useComponentViewport();
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-1ansaoc",
							className,
							classNames,
						)}
						data-framer-name={"Primarry"}
						layoutDependency={layoutDependency}
						layoutId={"z5IUohipo"}
						ref={ref ?? ref1}
						style={{
							background:
								"linear-gradient(270deg, hsla(0, 0%, 100%, 0.6) 0%, hsla(0, 0%, 100%, 0) 100%)",
							borderBottomLeftRadius: 2,
							borderBottomRightRadius: 2,
							borderTopLeftRadius: 2,
							borderTopRightRadius: 2,
							...style,
						}}
					>
						<motion.div
							className={"framer-rczvud"}
							data-framer-name={"shimmer"}
							layoutDependency={layoutDependency}
							layoutId={"mjspww55D"}
							style={{
								backgroundColor: "rgba(255, 255, 255, 0.2)",
								borderBottomLeftRadius: 1,
								borderBottomRightRadius: 1,
								borderTopLeftRadius: 1,
								borderTopRightRadius: 1,
								boxShadow: "0px 0px 6px 1px rgba(255, 255, 255, 0.6)",
							}}
						/>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-QVjJF.framer-1i1wbcd, .framer-QVjJF .framer-1i1wbcd { display: block; }",
	".framer-QVjJF.framer-1ansaoc { height: 1px; overflow: visible; position: relative; width: 100px; }",
	".framer-QVjJF .framer-rczvud { bottom: 0px; flex: none; overflow: visible; position: absolute; right: 0px; top: 0px; width: 2px; }",
];
var FramerzGd0Rd3IQ = withCSS(Component, css, "framer-QVjJF");
var stdin_default = FramerzGd0Rd3IQ;
FramerzGd0Rd3IQ.displayName = "Shimmer";
FramerzGd0Rd3IQ.defaultProps = {
	height: 1,
	width: 100,
};
addFonts(
	FramerzGd0Rd3IQ,
	[
		{
			explicitInter: true,
			fonts: [],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:shimmer
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"0db2cec6a51bfbc819a58c52eb8c1d5df9643fd4922504e375a2cbd7f2ff2fa5"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders ShimmerFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"0db2cec6a51bfbc819a58c52eb8c1d5df9643fd4922504e375a2cbd7f2ff2fa5"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var shimmer_default = ComponentWithRoot;
export { shimmer_default as default };
