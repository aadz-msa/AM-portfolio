// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 0db2cec6a51bfbc8 "AM portfolio", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * images?: {src: string, alt: string[] // Images
 * descriptions?: string[] // Descriptions
 * background?: string // Background
 * descriptionFont?: undefined // Description Font
 * descriptionColor?: string // Description Color
 * perspective?: number // Perspective
 * carouselRadius?: number // Carousel Radius
}} Props

 */
import { routes } from "./chunks/chunk-23HYNGZD.js";

// virtual:carousel3-d
import { Fragment } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/Iem7mDewVFiFG3B0BdtA/8vbcHrP4GNzd3ds0055j/Carousel3D.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import {
	useRef,
	useEffect,
	useState,
	useCallback,
	startTransition,
} from "react";
import {
	addPropertyControls,
	ControlType,
	useIsStaticRenderer,
	RenderTarget,
} from "unframer";
function Carousel3D(props) {
	const {
		images = [
			{
				src: "https://framerusercontent.com/images/GfGkADagM4KEibNcIiRUWlfrR0.jpg",
				alt: "Gradient 1 - Blue",
			},
			{
				src: "https://framerusercontent.com/images/aNsAT3jCvt4zglbWCUoFe33Q.jpg",
				alt: "Gradient 2 - Purple",
			},
			{
				src: "https://framerusercontent.com/images/BYnxEV1zjYb9bhWh1IwBZ1ZoS60.jpg",
				alt: "Gradient 3 - Orange",
			},
			{
				src: "https://framerusercontent.com/images/2uTNEj5aTl2K3NJaEFWMbnrA.jpg",
				alt: "Gradient 4 - Yellow",
			},
			{
				src: "https://framerusercontent.com/images/f9RiWoNpmlCMqVRIHz8l8wYfeI.jpg",
				alt: "Gradient 5 - Green",
			},
		],
		descriptions = [
			"Blue gradient image",
			"Purple gradient image",
			"Orange gradient image",
			"Yellow gradient image",
			"Green gradient image",
		],
		background = "#fff",
		descriptionFont,
		descriptionColor = "#000",
		perspective = 1200,
		radius = 220,
		style,
	} = props;
	const containerRef = useRef(null);
	const [rotation, setRotation] = useState(0);
	const [activeIndex, setActiveIndex] = useState(0);
	const isStatic = useIsStaticRenderer();
	const itemCount = images.length;
	useEffect(() => {
		if (isStatic) return;
		function handleScroll() {
			if (!containerRef.current) return;
			const rect = containerRef.current.getBoundingClientRect();
			const scrollY = window.scrollY || window.pageYOffset;
			const offsetTop = rect.top + scrollY;
			const windowHeight = window.innerHeight;
			const visible = Math.max(
				0,
				Math.min(rect.bottom, windowHeight) - Math.max(rect.top, 0),
			);
			if (visible <= 0) return;
			const progress = Math.min(
				1,
				Math.max(
					0,
					(window.scrollY + windowHeight - offsetTop) /
						(rect.height + windowHeight),
				),
			);
			const newRotation = progress * 360;
			startTransition(() => setRotation(newRotation));
			const idx = Math.round((newRotation / 360) * itemCount) % itemCount;
			startTransition(() => setActiveIndex(idx < 0 ? idx + itemCount : idx));
		}
		window.addEventListener("scroll", handleScroll, {
			passive: true,
		});
		handleScroll();
		return () => window.removeEventListener("scroll", handleScroll);
	}, [itemCount, isStatic]);
	const handleKeyDown = useCallback(
		(e) => {
			if (e.key === "ArrowRight") {
				startTransition(() => setRotation((r) => r + 360 / itemCount));
			} else if (e.key === "ArrowLeft") {
				startTransition(() => setRotation((r) => r - 360 / itemCount));
			}
		},
		[itemCount],
	);
	const getItemStyle = (i) => {
		const angle = (360 / itemCount) * i;
		return {
			position: "absolute",
			top: "50%",
			left: "50%",
			width: 220,
			height: 220,
			transform: `rotateY(${angle}deg) translateZ(${radius}px) translate(-50%, -50%)`,
			boxShadow:
				i === activeIndex
					? "0 8px 32px rgba(0,0,0,0.18)"
					: "0 2px 8px rgba(0,0,0,0.08)",
			borderRadius: 16,
			overflow: "hidden",
			border: i === activeIndex ? "2px solid #222" : "2px solid transparent",
			background: "#fff",
			transition: "box-shadow 0.2s, border 0.2s",
			zIndex: i === activeIndex ? 2 : 1,
			cursor: "pointer",
			willChange: "transform",
		};
	};
	const carouselStyle = {
		width: "100%",
		height: 260,
		position: "relative",
		perspective: `${perspective}px`,
		perspectiveOrigin: "50% 50%",
		background,
		overflow: "visible",
		display: "flex",
		alignItems: "center",
		justifyContent: "center",
		...style,
	};
	const innerStyle = {
		width: 220,
		height: 220,
		position: "relative",
		transformStyle: "preserve-3d",
		transform: `rotateY(${-rotation}deg)`,
		transition: isStatic ? "none" : "transform 0.5s cubic-bezier(.4,1,.4,1)",
	};
	const descStyle = {
		marginTop: 24,
		width: "100%",
		minHeight: 48,
		textAlign: "center",
		color: descriptionColor,
		...descriptionFont,
		background: "rgba(255,255,255,0.85)",
		borderRadius: 8,
		boxShadow: "0 2px 8px rgba(0,0,0,0.06)",
		padding: 12,
		display: "flex",
		alignItems: "center",
		justifyContent: "center",
		fontSize: descriptionFont?.fontSize || 18,
		fontWeight: descriptionFont?.fontWeight || 500,
		lineHeight: descriptionFont?.lineHeight || "1.3em",
	};
	if (RenderTarget.current() === RenderTarget.thumbnail) {
		return (
			<div
				style={{
					...carouselStyle,
					background,
				}}
			>
				<div
					style={{
						...innerStyle,
						transform: "none",
					}}
				>
					<img
						src={images[0].src}
						alt={images[0].alt}
						style={{
							width: 220,
							height: 220,
							objectFit: "cover",
							borderRadius: 16,
						}}
					/>
				</div>
				<div style={descStyle}>{descriptions[0]}</div>
			</div>
		);
	}
	return (
		<div
			ref={containerRef}
			style={carouselStyle}
			tabIndex={0}
			onKeyDown={handleKeyDown}
			aria-label={"3D Carousel"}
			role={"region"}
		>
			<div style={innerStyle}>
				{images.map((img, i) => (
					<div style={getItemStyle(i)} aria-selected={i === activeIndex}>
						<img
							src={img.src}
							alt={img.alt}
							style={{
								width: "100%",
								height: "100%",
								objectFit: "cover",
								borderRadius: 16,
							}}
							draggable={false}
						/>
					</div>
				))}
			</div>
			<div style={descStyle}>{descriptions[activeIndex] || ""}</div>
		</div>
	);
}
addPropertyControls(Carousel3D, {
	images: {
		type: ControlType.Array,
		title: "Images",
		control: {
			type: ControlType.Object,
			controls: {
				src: {
					type: ControlType.String,
					title: "Image URL",
					defaultValue:
						"https://framerusercontent.com/images/GfGkADagM4KEibNcIiRUWlfrR0.jpg",
				},
				alt: {
					type: ControlType.String,
					title: "Alt Text",
					defaultValue: "Image",
				},
			},
		},
		defaultValue: [
			{
				src: "https://framerusercontent.com/images/GfGkADagM4KEibNcIiRUWlfrR0.jpg",
				alt: "Gradient 1 - Blue",
			},
			{
				src: "https://framerusercontent.com/images/aNsAT3jCvt4zglbWCUoFe33Q.jpg",
				alt: "Gradient 2 - Purple",
			},
			{
				src: "https://framerusercontent.com/images/BYnxEV1zjYb9bhWh1IwBZ1ZoS60.jpg",
				alt: "Gradient 3 - Orange",
			},
			{
				src: "https://framerusercontent.com/images/2uTNEj5aTl2K3NJaEFWMbnrA.jpg",
				alt: "Gradient 4 - Yellow",
			},
			{
				src: "https://framerusercontent.com/images/f9RiWoNpmlCMqVRIHz8l8wYfeI.jpg",
				alt: "Gradient 5 - Green",
			},
		],
		maxCount: 8,
	},
	descriptions: {
		type: ControlType.Array,
		title: "Descriptions",
		control: {
			type: ControlType.String,
			defaultValue: "Description",
		},
		defaultValue: [
			"Blue gradient image",
			"Purple gradient image",
			"Orange gradient image",
			"Yellow gradient image",
			"Green gradient image",
		],
		maxCount: 8,
	},
	background: {
		type: ControlType.Color,
		title: "Background",
		defaultValue: "#fff",
	},
	descriptionFont: {
		type: ControlType.Font,
		title: "Description Font",
		controls: "extended",
		defaultFontType: "sans-serif",
		defaultValue: {
			fontSize: "18px",
			variant: "Medium",
			letterSpacing: "-0.01em",
			lineHeight: "1.3em",
		},
	},
	descriptionColor: {
		type: ControlType.Color,
		title: "Description Color",
		defaultValue: "#000",
	},
	perspective: {
		type: ControlType.Number,
		title: "Perspective",
		defaultValue: 1200,
		min: 400,
		max: 3e3,
		step: 10,
		unit: "px",
	},
	radius: {
		type: ControlType.Number,
		title: "Carousel Radius",
		defaultValue: 220,
		min: 100,
		max: 400,
		step: 1,
		unit: "px",
	},
});

// virtual:carousel3-d
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"0db2cec6a51bfbc819a58c52eb8c1d5df9643fd4922504e375a2cbd7f2ff2fa5"
			}
			locale={locale}
			locales={locales}
		>
			<Carousel3D {...rest} />
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders Carousel3DFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"0db2cec6a51bfbc819a58c52eb8c1d5df9643fd4922504e375a2cbd7f2ff2fa5"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={Carousel3D}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, Carousel3D);
var carousel3_d_default = ComponentWithRoot;
export { carousel3_d_default as default };
