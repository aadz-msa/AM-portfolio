// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 0db2cec6a51bfbc8 "AM portfolio", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * cards?: {image: {src: string, srcSet?: string, alt?: string}, title: string, description: string[] // Cards
 * background?: string // Background
 * cardBackground?: string // Card Background
 * cardRadius?: number // Card Radius
 * cardShadow?: boolean // Card Shadow
 * titleFont?: undefined // Title Font
 * descriptionFont?: undefined // Description Font
}} Props

 */
import { routes } from "./chunks/chunk-23HYNGZD.js";

// virtual:card-stack
import { Fragment } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/N2fqPNNd6CzIo2LI22Gs/yrnlUUAbVAMoBQ5u6A2N/CardStack.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useRef, useCallback, startTransition, useMemo } from "react";
import {
	addPropertyControls,
	ControlType,
	useIsStaticRenderer,
} from "unframer";
function CardStack(props) {
	const {
		cards,
		background,
		cardBackground,
		cardRadius,
		cardShadow,
		fontTitle,
		fontDescription,
		style,
	} = props;
	const [topIndex, setTopIndex] = useState(0);
	const isStatic = useIsStaticRenderer();
	const cardCount = cards.length;
	const containerRef = useRef(null);
	const handleCardClick = useCallback(() => {
		if (cardCount <= 1) return;
		startTransition(() => setTopIndex((prev) => (prev + 1) % cardCount));
	}, [cardCount]);
	const orderedCards = useMemo(() => {
		return Array.from(
			{
				length: cardCount,
			},
			(_, i) => cards[(topIndex + i) % cardCount],
		);
	}, [cards, topIndex, cardCount]);
	const stackOffset = 24;
	const stackScale = 0.96;
	const maxStack = Math.min(3, cardCount);
	return (
		<div
			ref={containerRef}
			style={{
				...style,
				width: "100%",
				height: "100%",
				background,
				borderRadius: cardRadius,
				overflow: "hidden",
				position: "relative",
				display: "flex",
				alignItems: "center",
				justifyContent: "center",
			}}
		>
			{orderedCards.slice(0, maxStack).map((card, i) => {
				const z = maxStack - i;
				const offset = i * stackOffset;
				const scale = Math.pow(stackScale, i);
				const isTop = i === 0;
				const image =
					card.image && card.image.src
						? card.image
						: {
								src: "https://framerusercontent.com/images/GfGkADagM4KEibNcIiRUWlfrR0.jpg",
								alt: "Gradient 1 - Blue",
							};
				return (
					<div
						style={{
							position: "absolute",
							top: offset,
							left: offset,
							right: offset,
							bottom: offset,
							zIndex: z,
							transform: `scale(${scale})`,
							boxShadow: cardShadow
								? "0 8px 32px rgba(0,0,0,0.10), 0 1.5px 4px rgba(0,0,0,0.08)"
								: "none",
							borderRadius: cardRadius,
							background: cardBackground,
							cursor:
								isTop && cardCount > 1 && !isStatic ? "pointer" : "default",
							transition: isStatic
								? "none"
								: "all 0.35s cubic-bezier(.4,1,.4,1)",
							display: "flex",
							flexDirection: "column",
							alignItems: "center",
							justifyContent: "flex-start",
							overflow: "hidden",
						}}
						onClick={
							isTop && !isStatic && cardCount > 1 ? handleCardClick : void 0
						}
						aria-label={card.title}
						role={"group"}
					>
						<img
							src={image.src}
							alt={image.alt}
							style={{
								width: "100%",
								height: 180,
								objectFit: "cover",
								borderTopLeftRadius: cardRadius,
								borderTopRightRadius: cardRadius,
								display: "block",
							}}
						/>
						<div
							style={{
								padding: 24,
								width: "100%",
								flex: 1,
								display: "flex",
								flexDirection: "column",
								justifyContent: "flex-start",
							}}
						>
							<div
								style={{
									...fontTitle,
									marginBottom: 10,
								}}
							>
								{card.title}
							</div>
							<div
								style={{
									...fontDescription,
									color: "#666",
								}}
							>
								{card.description}
							</div>
						</div>
					</div>
				);
			})}
		</div>
	);
}
addPropertyControls(CardStack, {
	cards: {
		type: ControlType.Array,
		title: "Cards",
		control: {
			type: ControlType.Object,
			controls: {
				image: {
					type: ControlType.ResponsiveImage,
					title: "Image",
				},
				title: {
					type: ControlType.String,
					title: "Title",
					defaultValue: "Card Title",
				},
				description: {
					type: ControlType.String,
					title: "Description",
					defaultValue: "Card description goes here.",
					displayTextArea: true,
				},
			},
		},
		defaultValue: [
			{
				image: {
					src: "https://framerusercontent.com/images/GfGkADagM4KEibNcIiRUWlfrR0.jpg",
					alt: "Gradient 1 - Blue",
				},
				title: "Card One",
				description: "This is the first card in the stack.",
			},
			{
				image: {
					src: "https://framerusercontent.com/images/aNsAT3jCvt4zglbWCUoFe33Q.jpg",
					alt: "Gradient 2 - Purple",
				},
				title: "Card Two",
				description: "This is the second card in the stack.",
			},
			{
				image: {
					src: "https://framerusercontent.com/images/BYnxEV1zjYb9bhWh1IwBZ1ZoS60.jpg",
					alt: "Gradient 3 - Orange",
				},
				title: "Card Three",
				description: "This is the third card in the stack.",
			},
		],
		maxCount: 6,
	},
	background: {
		type: ControlType.Color,
		title: "Background",
		defaultValue: "#F5F5F5",
	},
	cardBackground: {
		type: ControlType.Color,
		title: "Card Background",
		defaultValue: "#fff",
	},
	cardRadius: {
		type: ControlType.Number,
		title: "Card Radius",
		defaultValue: 16,
		min: 0,
		max: 32,
		step: 1,
	},
	cardShadow: {
		type: ControlType.Boolean,
		title: "Card Shadow",
		defaultValue: true,
		enabledTitle: "Show",
		disabledTitle: "Hide",
	},
	fontTitle: {
		type: ControlType.Font,
		title: "Title Font",
		defaultValue: {
			fontSize: "22px",
			variant: "Semibold",
			letterSpacing: "-0.01em",
			lineHeight: "1.2em",
		},
		controls: "extended",
		defaultFontType: "sans-serif",
	},
	fontDescription: {
		type: ControlType.Font,
		title: "Description Font",
		defaultValue: {
			fontSize: "15px",
			variant: "Medium",
			letterSpacing: "-0.01em",
			lineHeight: "1.3em",
		},
		controls: "extended",
		defaultFontType: "sans-serif",
	},
});

// virtual:card-stack
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"0db2cec6a51bfbc819a58c52eb8c1d5df9643fd4922504e375a2cbd7f2ff2fa5"
			}
			locale={locale}
			locales={locales}
		>
			<CardStack {...rest} />
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders CardStackFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"0db2cec6a51bfbc819a58c52eb8c1d5df9643fd4922504e375a2cbd7f2ff2fa5"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={CardStack}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, CardStack);
var card_stack_default = ComponentWithRoot;
export { card_stack_default as default };
