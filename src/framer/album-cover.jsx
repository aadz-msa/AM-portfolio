// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 0db2cec6a51bfbc8 "AM portfolio", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * image?: {src: string, srcSet?: string, alt?: string} // Image
 * title?: string // Title
 * artist?: string // Artist
 * background?: string // Background
 * titleFont?: undefined // Title Font
 * artistFont?: undefined // Artist Font
}} Props

 */
import { routes } from "./chunks/chunk-23HYNGZD.js";

// virtual:album-cover
import { Fragment } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/TsSc5dOd6uxnr76Hyx90/BScQDTjz6dWlPmQLZjPQ/AlbumCover.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { addPropertyControls, ControlType } from "unframer";
function AlbumCover(props) {
	const {
		image = {
			src: "https://framerusercontent.com/images/GfGkADagM4KEibNcIiRUWlfrR0.jpg",
			alt: "Gradient 1 - Blue",
		},
		title,
		artist,
		background,
		titleFont,
		artistFont,
		style,
	} = props;
	return (
		<div
			style={{
				...style,
				width: "100%",
				height: "100%",
				background,
				borderRadius: 16,
				boxShadow: "0 4px 24px rgba(0,0,0,0.10)",
				display: "flex",
				flexDirection: "column",
				alignItems: "center",
				justifyContent: "flex-start",
				padding: 32,
				gap: 24,
				position: "relative",
				overflow: "hidden",
			}}
		>
			<img
				src={image.src}
				alt={image.alt}
				style={{
					width: 200,
					height: 200,
					objectFit: "cover",
					borderRadius: 12,
					boxShadow: "0 2px 8px rgba(0,0,0,0.10)",
					background: "#eee",
					display: "block",
				}}
			/>
			<div
				style={{
					width: "100%",
					textAlign: "center",
					display: "flex",
					flexDirection: "column",
					gap: 8,
				}}
			>
				<span
					style={{
						...titleFont,
						color: "#111",
						width: "100%",
						display: "block",
						whiteSpace: "nowrap",
						overflow: "hidden",
						textOverflow: "ellipsis",
					}}
				>
					{title}
				</span>
				<span
					style={{
						...artistFont,
						color: "#666",
						width: "100%",
						display: "block",
						whiteSpace: "nowrap",
						overflow: "hidden",
						textOverflow: "ellipsis",
					}}
				>
					{artist}
				</span>
			</div>
		</div>
	);
}
addPropertyControls(AlbumCover, {
	image: {
		type: ControlType.ResponsiveImage,
		title: "Image",
	},
	title: {
		type: ControlType.String,
		title: "Title",
		defaultValue: "Album Title",
	},
	artist: {
		type: ControlType.String,
		title: "Artist",
		defaultValue: "Artist Name",
	},
	background: {
		type: ControlType.Color,
		title: "Background",
		defaultValue: "#FFFFFF",
	},
	titleFont: {
		type: ControlType.Font,
		title: "Title Font",
		controls: "extended",
		defaultFontType: "sans-serif",
		defaultValue: {
			fontSize: "22px",
			variant: "Semibold",
			letterSpacing: "-0.01em",
			lineHeight: "1.2em",
		},
	},
	artistFont: {
		type: ControlType.Font,
		title: "Artist Font",
		controls: "extended",
		defaultFontType: "sans-serif",
		defaultValue: {
			fontSize: "15px",
			variant: "Medium",
			letterSpacing: "-0.01em",
			lineHeight: "1.3em",
		},
	},
});

// virtual:album-cover
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"0db2cec6a51bfbc819a58c52eb8c1d5df9643fd4922504e375a2cbd7f2ff2fa5"
			}
			locale={locale}
			locales={locales}
		>
			<AlbumCover {...rest} />
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders AlbumCoverFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"0db2cec6a51bfbc819a58c52eb8c1d5df9643fd4922504e375a2cbd7f2ff2fa5"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={AlbumCover}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, AlbumCover);
var album_cover_default = ComponentWithRoot;
export { album_cover_default as default };
