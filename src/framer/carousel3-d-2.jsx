// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 0db2cec6a51bfbc8 "AM portfolio", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * images?: {src: string, srcSet?: string, alt?: string}[] // Images
 * perspective?: number // Perspective
 * cardWidth?: number // Card Width
 * cardHeight?: number // Card Height
 * gap?: number // Gap
 * background?: string // Background
 * showArrows?: boolean // Show Arrows
}} Props

 */
import { routes } from "./chunks/chunk-23HYNGZD.js";

// virtual:carousel3-d-2
import { Fragment } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/BkFejtj7s8N66g7ZKfAv/5qKR9qK8gXN53nPd4SQx/Carousel3D_2.js
import {
	jsx as _jsx,
	jsxs as _jsxs,
	Fragment as _Fragment,
} from "react/jsx-runtime";
import { useState, useCallback, useEffect, startTransition } from "react";
import {
	addPropertyControls,
	ControlType,
	useIsStaticRenderer,
} from "unframer";
var defaultImages = [
	{
		src: "https://framerusercontent.com/images/GfGkADagM4KEibNcIiRUWlfrR0.jpg",
		alt: "Gradient 1 - Blue",
	},
	{
		src: "https://framerusercontent.com/images/aNsAT3jCvt4zglbWCUoFe33Q.jpg",
		alt: "Gradient 2 - Purple",
	},
	{
		src: "https://framerusercontent.com/images/BYnxEV1zjYb9bhWh1IwBZ1ZoS60.jpg",
		alt: "Gradient 3 - Orange",
	},
	{
		src: "https://framerusercontent.com/images/2uTNEj5aTl2K3NJaEFWMbnrA.jpg",
		alt: "Gradient 4 - Yellow",
	},
	{
		src: "https://framerusercontent.com/images/f9RiWoNpmlCMqVRIHz8l8wYfeI.jpg",
		alt: "Gradient 5 - Green",
	},
];
function Carousel3D(props) {
	const {
		images = defaultImages,
		perspective,
		cardWidth,
		cardHeight,
		gap,
		background,
		showArrows,
		style,
	} = props;
	const [index, setIndex] = useState(0);
	const isStatic = useIsStaticRenderer();
	const num = images.length;
	const angle = 360 / num;
	const radius = (cardWidth + gap) / (2 * Math.tan(Math.PI / num));
	const go = useCallback(
		(dir) => {
			startTransition(() => setIndex((i) => (i + dir + num) % num));
		},
		[num],
	);
	useEffect(() => {
		if (isStatic) return;
		const handle = (e) => {
			if (e.key === "ArrowLeft") go(-1);
			if (e.key === "ArrowRight") go(1);
		};
		window.addEventListener("keydown", handle);
		return () => window.removeEventListener("keydown", handle);
	}, [go, isStatic]);
	return (
		<div
			style={{
				...style,
				width: "100%",
				height: "100%",
				background,
				perspective,
				overflow: "visible",
				position: "relative",
				display: "flex",
				alignItems: "center",
				justifyContent: "center",
				touchAction: "pan-y",
			}}
			tabIndex={0}
			aria-label={"3D Carousel"}
			role={"region"}
		>
			<div
				style={{
					width: cardWidth,
					height: cardHeight,
					position: "relative",
					transformStyle: "preserve-3d",
					transform: `translateZ(${-radius}px) rotateY(${-index * angle}deg)`,
					transition: isStatic
						? "none"
						: "transform 0.7s cubic-bezier(.77,0,.18,1)",
				}}
			>
				{images.map((img, i) => (
					<div
						style={{
							position: "absolute",
							left: 0,
							top: 0,
							width: cardWidth,
							height: cardHeight,
							boxShadow: "0 8px 32px rgba(0,0,0,0.10)",
							borderRadius: 16,
							overflow: "hidden",
							background: "#fff",
							transform: `rotateY(${i * angle}deg) translateZ(${radius}px)`,
							transition: isStatic
								? "none"
								: "transform 0.7s cubic-bezier(.77,0,.18,1)",
							zIndex: i === index ? 2 : 1,
							outline: i === index ? "2px solid #0099FF" : "none",
						}}
						aria-hidden={i !== index}
					>
						<img
							src={img.src}
							alt={img.alt}
							style={{
								width: "100%",
								height: "100%",
								objectFit: "cover",
								display: "block",
								pointerEvents: "none",
								userSelect: "none",
							}}
							draggable={false}
						/>
					</div>
				))}
			</div>
			{showArrows && !isStatic && (
				<_Fragment>
					<button
						aria-label={"Previous"}
						style={arrowStyle("left")}
						onClick={() => go(-1)}
					>
						<svg width={"32"} height={"32"} viewBox={"0 0 32 32"}>
							<path
								d={"M20 8l-8 8 8 8"}
								stroke={"#222"}
								strokeWidth={"2"}
								fill={"none"}
								strokeLinecap={"round"}
							/>
						</svg>
					</button>
					<button
						aria-label={"Next"}
						style={arrowStyle("right")}
						onClick={() => go(1)}
					>
						<svg width={"32"} height={"32"} viewBox={"0 0 32 32"}>
							<path
								d={"M12 8l8 8-8 8"}
								stroke={"#222"}
								strokeWidth={"2"}
								fill={"none"}
								strokeLinecap={"round"}
							/>
						</svg>
					</button>
				</_Fragment>
			)}
		</div>
	);
}
function arrowStyle(side) {
	return {
		position: "absolute",
		top: "50%",
		[side]: 12,
		transform: "translateY(-50%)",
		background: "rgba(255,255,255,0.85)",
		border: "none",
		borderRadius: 24,
		boxShadow: "0 2px 8px rgba(0,0,0,0.08)",
		width: 48,
		height: 48,
		display: "flex",
		alignItems: "center",
		justifyContent: "center",
		cursor: "pointer",
		zIndex: 10,
		outline: "none",
		transition: "background 0.2s",
	};
}
addPropertyControls(Carousel3D, {
	images: {
		type: ControlType.Array,
		title: "Images",
		control: {
			type: ControlType.ResponsiveImage,
		},
		defaultValue: defaultImages,
		maxCount: 10,
	},
	perspective: {
		type: ControlType.Number,
		title: "Perspective",
		defaultValue: 1200,
		min: 400,
		max: 3e3,
		step: 10,
		unit: "px",
	},
	cardWidth: {
		type: ControlType.Number,
		title: "Card Width",
		defaultValue: 320,
		min: 120,
		max: 600,
		step: 1,
		unit: "px",
	},
	cardHeight: {
		type: ControlType.Number,
		title: "Card Height",
		defaultValue: 200,
		min: 80,
		max: 400,
		step: 1,
		unit: "px",
	},
	gap: {
		type: ControlType.Number,
		title: "Gap",
		defaultValue: 24,
		min: 0,
		max: 80,
		step: 1,
		unit: "px",
	},
	background: {
		type: ControlType.Color,
		title: "Background",
		defaultValue: "#F5F5F5",
	},
	showArrows: {
		type: ControlType.Boolean,
		title: "Show Arrows",
		defaultValue: true,
		enabledTitle: "Show",
		disabledTitle: "Hide",
	},
});

// virtual:carousel3-d-2
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"0db2cec6a51bfbc819a58c52eb8c1d5df9643fd4922504e375a2cbd7f2ff2fa5"
			}
			locale={locale}
			locales={locales}
		>
			<Carousel3D {...rest} />
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders Carousel3D2FramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"0db2cec6a51bfbc819a58c52eb8c1d5df9643fd4922504e375a2cbd7f2ff2fa5"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={Carousel3D}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, Carousel3D);
var carousel3_d_2_default = ComponentWithRoot;
export { carousel3_d_2_default as default };
