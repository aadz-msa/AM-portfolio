// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 0db2cec6a51bfbc8 "AM portfolio", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * clips?: {image: {src: string, srcSet?: string, alt?: string}, description: string[] // Clips
 * background?: string // Background
 * descBG?: string // Desc BG
 * descColor?: string // Desc Color
 * descFont?: undefined // Desc Font
}} Props

 */
import { routes } from "./chunks/chunk-23HYNGZD.js";

// virtual:carousel3-d-1
import { Fragment } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/DQ6bmyTyWHL5J7288BgN/H1jU8L7oXHAwTUesLwTZ/Carousel3D_1.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useRef, useState, useEffect, startTransition } from "react";
import {
	addPropertyControls,
	ControlType,
	useIsStaticRenderer,
} from "unframer";
var defaultClips = [
	{
		image: {
			src: "https://framerusercontent.com/images/GfGkADagM4KEibNcIiRUWlfrR0.jpg",
			alt: "Gradient 1 - Blue",
		},
		description: "First clip description.",
	},
	{
		image: {
			src: "https://framerusercontent.com/images/aNsAT3jCvt4zglbWCUoFe33Q.jpg",
			alt: "Gradient 2 - Purple",
		},
		description: "Second clip description.",
	},
	{
		image: {
			src: "https://framerusercontent.com/images/BYnxEV1zjYb9bhWh1IwBZ1ZoS60.jpg",
			alt: "Gradient 3 - Orange",
		},
		description: "Third clip description.",
	},
	{
		image: {
			src: "https://framerusercontent.com/images/2uTNEj5aTl2K3NJaEFWMbnrA.jpg",
			alt: "Gradient 4 - Yellow",
		},
		description: "Fourth clip description.",
	},
	{
		image: {
			src: "https://framerusercontent.com/images/f9RiWoNpmlCMqVRIHz8l8wYfeI.jpg",
			alt: "Gradient 5 - Green",
		},
		description: "Fifth clip description.",
	},
];
function Carousel3D(props) {
	const {
		clips = defaultClips,
		background,
		descriptionBackground,
		descriptionColor,
		descriptionFont,
		style,
	} = props;
	const [scrollY, setScrollY] = useState(0);
	const [activeIndex, setActiveIndex] = useState(0);
	const containerRef = useRef(null);
	const isStatic = useIsStaticRenderer();
	useEffect(() => {
		if (isStatic) return;
		function onScroll() {
			if (!containerRef.current) return;
			const rect = containerRef.current.getBoundingClientRect();
			const scrollTop = window.scrollY + window.innerHeight / 2;
			const offset = rect.top + window.scrollY;
			const height = rect.height;
			if (height <= 0) return;
			const rel = (scrollTop - offset) / height;
			const idx = Math.max(
				0,
				Math.min(clips.length - 1, Math.round(rel * (clips.length - 1))),
			);
			startTransition(() => setActiveIndex(idx));
			startTransition(() => setScrollY(window.scrollY));
		}
		window.addEventListener("scroll", onScroll);
		onScroll();
		return () => window.removeEventListener("scroll", onScroll);
	}, [clips.length, isStatic]);
	const radius = 220;
	const theta = 360 / clips.length;
	return (
		<div
			ref={containerRef}
			style={{
				...style,
				width: "100%",
				height: "100%",
				background,
				position: "relative",
				overflow: "visible",
				perspective: 1200,
				display: "flex",
				flexDirection: "column",
				alignItems: "center",
				justifyContent: "center",
			}}
		>
			<div
				style={{
					width: 340,
					height: 220,
					position: "relative",
					transformStyle: "preserve-3d",
					transition: isStatic
						? "none"
						: "transform 0.7s cubic-bezier(.25,.8,.25,1)",
					transform: `translateZ(-${radius}px) rotateY(-${activeIndex * theta}deg)`,
					maxWidth: "100%",
					minWidth: 240,
				}}
			>
				{clips.map((clip, i) => {
					const image =
						clip.image && clip.image.src
							? clip.image
							: {
									src: "https://framerusercontent.com/images/GfGkADagM4KEibNcIiRUWlfrR0.jpg",
									alt: "Image",
								};
					return (
						<div
							style={{
								position: "absolute",
								left: 0,
								top: 0,
								width: "100%",
								maxWidth: 320,
								minWidth: 200,
								height: 200,
								// background: "#fff",
								borderRadius: 16,
								boxShadow:
									i === activeIndex
										? "0 8px 32px rgba(0,0,0,0.18)"
										: "0 2px 8px rgba(0,0,0,0.08)",
								overflow: "hidden",
								display: "flex",
								flexDirection: "column",
								alignItems: "center",
								justifyContent: "center",
								transform: `rotateY(${i * theta}deg) translateZ(${radius}px) ${i === activeIndex ? "scale(1.08)" : "scale(0.92)"}`,
								transition: isStatic
									? "none"
									: "transform 0.7s cubic-bezier(.25,.8,.25,1), box-shadow 0.3s",
								zIndex: i === activeIndex ? 2 : 1,
								boxSizing: "border-box",
							}}
							aria-current={i === activeIndex}
						>
							<img
								src={image.src}
								alt={image.alt}
								style={{
									width: "100%",
									height: 120,
									objectFit: "cover",
									borderTopLeftRadius: 16,
									borderTopRightRadius: 16,
									minWidth: 0,
								}}
							/>
							<div
								style={{
									width: "100%",
									background: descriptionBackground,
									color: descriptionColor,
									padding: "16px 18px",
									minHeight: 60,
									display: "flex",
									alignItems: "center",
									justifyContent: "center",
									...descriptionFont,
									borderBottomLeftRadius: 16,
									borderBottomRightRadius: 16,
									fontSize: descriptionFont?.fontSize || 16,
									textAlign: "center",
									wordBreak: "break-word",
									boxSizing: "border-box",
								}}
							>
								{clip.description}
							</div>
						</div>
					);
				})}
			</div>
			<div
				style={{
					display: "flex",
					gap: 10,
					marginTop: 24,
				}}
			>
				{clips.map((_, i) => (
					<button
						aria-label={`Go to slide ${i + 1}`}
						style={{
							width: 14,
							height: 14,
							borderRadius: "50%",
							border: "none",
							background: i === activeIndex ? descriptionColor : "#eee",
							cursor: "pointer",
							transition: "background 0.2s",
						}}
						onClick={() => startTransition(() => setActiveIndex(i))}
					/>
				))}
			</div>
		</div>
	);
}
addPropertyControls(Carousel3D, {
	clips: {
		type: ControlType.Array,
		title: "Clips",
		control: {
			type: ControlType.Object,
			controls: {
				image: {
					type: ControlType.ResponsiveImage,
				},
				description: {
					type: ControlType.String,
					defaultValue: "Description",
				},
			},
		},
		maxCount: 5,
		defaultValue: defaultClips,
	},
	background: {
		type: ControlType.Color,
		title: "Background",
		defaultValue: "#FFFFFF",
	},
	descriptionBackground: {
		type: ControlType.Color,
		title: "Desc BG",
		defaultValue: "#F5F5F5",
	},
	descriptionColor: {
		type: ControlType.Color,
		title: "Desc Color",
		defaultValue: "#000000",
	},
	descriptionFont: {
		type: ControlType.Font,
		title: "Desc Font",
		controls: "extended",
		defaultFontType: "sans-serif",
		defaultValue: {
			fontSize: 16,
			variant: "Medium",
			letterSpacing: "-0.01em",
			lineHeight: "1.3em",
		},
	},
});

// virtual:carousel3-d-1
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"0db2cec6a51bfbc819a58c52eb8c1d5df9643fd4922504e375a2cbd7f2ff2fa5"
			}
			locale={locale}
			locales={locales}
		>
			<Carousel3D {...rest} />
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders Carousel3D1FramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"0db2cec6a51bfbc819a58c52eb8c1d5df9643fd4922504e375a2cbd7f2ff2fa5"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={Carousel3D}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, Carousel3D);
var carousel3_d_1_default = ComponentWithRoot;
export { carousel3_d_1_default as default };
