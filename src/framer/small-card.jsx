// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 0db2cec6a51bfbc8 "AM portfolio", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * icon?: undefined // Icon
 * text?: string // text
}} Props

 */
import { stdin_default } from "./chunks/chunk-E4632PSI.js";
import { className, css, fonts } from "./chunks/chunk-QT4ZEWLA.js";
import { routes } from "./chunks/chunk-23HYNGZD.js";

// virtual:small-card
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/fBzMg0valzxPoxRlKQCZ/AR6Ljl3xAhTPNxDJdbDS/bLe3VcUET.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ControlType,
	cx,
	getFontsFromSharedStyle,
	Instance,
	RichText,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
	withFX,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";
var MotionDivWithFX = withFX(motion.div);
var serializationHash = "framer-NHEYw";
var variantClassNames = {
	Ya4q77oS0: "framer-v-eygmpz",
};
var animation = {
	opacity: 0,
	rotate: 0,
	rotateX: 0,
	rotateY: 0,
	scale: 1,
	skewX: 0,
	skewY: 0,
	x: -50,
	y: 0,
};
var transition1 = {
	damping: 25,
	delay: 0.45,
	mass: 1,
	stiffness: 127,
	type: "spring",
};
var animation1 = {
	opacity: 0,
	rotate: 0,
	rotateX: 0,
	rotateY: 0,
	scale: 1,
	skewX: 0,
	skewY: 0,
	transition: transition1,
	x: -50,
	y: 0,
};
var transition2 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var getProps = ({ height, icon, id, text, width, ...props }) => {
	return {
		...props,
		D9G1UslsE: text ?? props.D9G1UslsE ?? "Video & Motion Graphics",
		nSEMkmct9: icon ?? props.nSEMkmct9 ?? stdin_default,
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const {
		style,
		className: className2,
		layoutId,
		variant,
		nSEMkmct9,
		D9G1UslsE,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		defaultVariant: "Ya4q77oS0",
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [className];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition2}>
					<MotionDivWithFX
						{...restProps}
						{...gestureHandlers}
						__framer__animate={{
							transition: transition1,
						}}
						__framer__animateOnce={true}
						__framer__enter={animation}
						__framer__exit={animation1}
						__framer__styleAppearEffectEnabled={true}
						__framer__threshold={0}
						__perspectiveFX={false}
						__smartComponentFX={true}
						__targetOpacity={1}
						className={cx(
							scopingClassNames,
							"framer-eygmpz",
							className2,
							classNames,
						)}
						data-framer-name={"Primary"}
						layoutDependency={layoutDependency}
						layoutId={"Ya4q77oS0"}
						ref={refBinding}
						style={{
							backgroundColor:
								"var(--token-cba3b9c8-9e49-437e-aca1-1e69db3088dc, rgb(17, 17, 17))",
							borderBottomLeftRadius: 78,
							borderBottomRightRadius: 78,
							borderTopLeftRadius: 78,
							borderTopRightRadius: 78,
							...style,
						}}
					>
						<Instance
							animated={true}
							className={"framer-1ir2ivd"}
							Component={nSEMkmct9}
							layoutDependency={layoutDependency}
							layoutId={"x81K7ufJk"}
							style={{
								"--1m6trwb": 0.2,
								"--21h8s6":
									"var(--token-7a7ce709-7970-4e23-97d8-1ae0355d02f0, rgb(255, 255, 255))",
								"--pgex8v": 1.5,
							}}
						/>
						<RichText
							__fromCanvasComponent={true}
							className={"framer-av4puv"}
							fonts={["Inter"]}
							layoutDependency={layoutDependency}
							layoutId={"LQ1dhYa6h"}
							style={{
								"--framer-link-text-color": "rgb(0, 153, 255)",
								"--framer-link-text-decoration": "underline",
							}}
							text={D9G1UslsE}
							verticalAlignment={"top"}
							withExternalLayout={true}
						>
							<React.Fragment>
								<motion.p
									className={"framer-styles-preset-wu4ebp"}
									data-styles-preset={"H1YXoF4HR"}
								>
									{"Video & Motion Graphics"}
								</motion.p>
							</React.Fragment>
						</RichText>
					</MotionDivWithFX>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css2 = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-NHEYw.framer-y37q31, .framer-NHEYw .framer-y37q31 { display: block; }",
	".framer-NHEYw.framer-eygmpz { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: hidden; padding: 12px 16px 12px 16px; position: relative; width: min-content; will-change: var(--framer-will-change-override, transform); }",
	".framer-NHEYw .framer-1ir2ivd { flex: none; height: var(--framer-aspect-ratio-supported, 21px); position: relative; width: 20px; }",
	".framer-NHEYw .framer-av4puv { flex: none; height: auto; position: relative; white-space: pre; width: auto; }",
	...css,
];
var FramerbLe3VcUET = withCSS(Component, css2, "framer-NHEYw");
var stdin_default2 = FramerbLe3VcUET;
FramerbLe3VcUET.displayName = "small card";
FramerbLe3VcUET.defaultProps = {
	height: 56,
	width: 251,
};
addPropertyControls(FramerbLe3VcUET, {
	nSEMkmct9: {
		defaultValue: {
			identifier:
				"module:KSvtBOJuMnaS19KCHdOk/rkIUHW4WnSk50fJARp6M/QAgTWZoLn.js:default",
			moduleId: "KSvtBOJuMnaS19KCHdOk",
		},
		setModuleId: "omX0gWFPqDwhaiWwf6ab",
		title: "Icon",
		type: ControlType.VectorSetItem,
	},
	D9G1UslsE: {
		defaultValue: "Video & Motion Graphics",
		displayTextArea: false,
		title: "text",
		type: ControlType.String,
	},
});
addFonts(
	FramerbLe3VcUET,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F",
					url: "https://framerusercontent.com/assets/5vvr9Vy74if2I6bQbJvbw7SY1pQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116",
					url: "https://framerusercontent.com/assets/EOr0mi4hNtlgWNn9if640EZzXCo.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+1F00-1FFF",
					url: "https://framerusercontent.com/assets/Y9k9QrlZAqio88Klkmbd8VoMQc.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0370-03FF",
					url: "https://framerusercontent.com/assets/OYrD2tBIBPvoJXiIHnLoOXnY9M.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF",
					url: "https://framerusercontent.com/assets/JeYwfuaPfZHQhEG8U5gtPDZ7WQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD",
					url: "https://framerusercontent.com/assets/vQyevYAyHtARFwPqUzQGpnDs.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB",
					url: "https://framerusercontent.com/assets/b6Y37FthZeALduNqHicBT6FutY.woff2",
					weight: "400",
				},
			],
		},
		...getFontsFromSharedStyle(fonts),
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:small-card
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"0db2cec6a51bfbc819a58c52eb8c1d5df9643fd4922504e375a2cbd7f2ff2fa5"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default2, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders SmallCardFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"0db2cec6a51bfbc819a58c52eb8c1d5df9643fd4922504e375a2cbd7f2ff2fa5"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default2}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default2);
var small_card_default = ComponentWithRoot;
export { small_card_default as default };
