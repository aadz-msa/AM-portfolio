// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 0db2cec6a51bfbc8 "AM portfolio", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * rating?: number // Rating
 * starColor?: string // Star Color
 * filledColor?: string // Filled Color
 * starSize?: number // Star Size
 * textSize?: number // Text Size
 * textWeight?: number // Text Weight
 * textColor?: string // Text Color
}} Props

 */
import { routes } from "./chunks/chunk-23HYNGZD.js";

// virtual:rating
import { Fragment } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/rGpCa12aQR1yDW754qjh/CoyRD8TeVxWZk37rbK4s/rating.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { addPropertyControls, ControlType } from "unframer";
function StarRating(props) {
	const {
		rating,
		starColor,
		filledColor,
		starSize,
		textSize,
		textWeight,
		textColor,
		style,
	} = props;
	const formattedRating = Number.isInteger(rating)
		? `${rating}.0`
		: rating.toFixed(1);
	const renderStar = (index) => {
		if (rating >= index + 1) {
			return (
				<svg
					xmlns={"http://www.w3.org/2000/svg"}
					viewBox={"0 0 24 24"}
					fill={filledColor}
					width={`${starSize}px`}
					height={`${starSize}px`}
				>
					<path
						d={
							"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"
						}
					/>
				</svg>
			);
		} else if (rating > index && rating < index + 1) {
			return (
				<svg
					xmlns={"http://www.w3.org/2000/svg"}
					viewBox={"0 0 24 24"}
					width={`${starSize}px`}
					height={`${starSize}px`}
				>
					<defs>
						<linearGradient id={`half-fill-${index}`}>
							<stop offset={"50%"} stopColor={filledColor} />
							<stop offset={"50%"} stopColor={starColor} />
						</linearGradient>
					</defs>
					<path
						fill={`url(#half-fill-${index})`}
						d={
							"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"
						}
					/>
				</svg>
			);
		} else {
			return (
				<svg
					xmlns={"http://www.w3.org/2000/svg"}
					viewBox={"0 0 24 24"}
					fill={starColor}
					width={`${starSize}px`}
					height={`${starSize}px`}
				>
					<path
						d={
							"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"
						}
					/>
				</svg>
			);
		}
	};
	return (
		<div
			style={{
				...style,
				display: "flex",
				alignItems: "center",
				gap: "8px",
			}}
		>
			<div
				style={{
					fontSize: `${textSize}px`,
					fontWeight: textWeight,
					color: textColor,
				}}
			>
				{formattedRating}
			</div>
			<div
				style={{
					display: "flex",
					gap: "4px",
				}}
			>
				{Array.from(
					{
						length: 5,
					},
					(_, index) => renderStar(index),
				)}
			</div>
		</div>
	);
}
StarRating.displayName = "Star Rating";
addPropertyControls(StarRating, {
	rating: {
		type: ControlType.Number,
		defaultValue: 3,
		min: 0,
		max: 5,
		step: 0.1,
		displayStepper: true,
		title: "Rating",
	},
	starColor: {
		type: ControlType.Color,
		defaultValue: "#d3d3d3",
		title: "Star Color",
	},
	filledColor: {
		type: ControlType.Color,
		defaultValue: "#FFD700",
		title: "Filled Color",
	},
	starSize: {
		type: ControlType.Number,
		defaultValue: 24,
		min: 12,
		max: 64,
		step: 1,
		unit: "px",
		title: "Star Size",
	},
	textSize: {
		type: ControlType.Number,
		defaultValue: 16,
		min: 10,
		max: 64,
		step: 1,
		unit: "px",
		title: "Text Size",
	},
	textWeight: {
		type: ControlType.Number,
		defaultValue: 400,
		min: 100,
		max: 900,
		step: 100,
		title: "Text Weight",
	},
	textColor: {
		type: ControlType.Color,
		defaultValue: "#000000",
		title: "Text Color",
	},
});

// virtual:rating
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"0db2cec6a51bfbc819a58c52eb8c1d5df9643fd4922504e375a2cbd7f2ff2fa5"
			}
			locale={locale}
			locales={locales}
		>
			<StarRating {...rest} />
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders RatingFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"0db2cec6a51bfbc819a58c52eb8c1d5df9643fd4922504e375a2cbd7f2ff2fa5"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={StarRating}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, StarRating);
var rating_default = ComponentWithRoot;
export { rating_default as default };
